services:
  php:
    build:
      context: .
    #  dockerfile: Dockerfile
    container_name: php_app
    ports:
      - "8000:80"   # Exponer el puerto para acceder al servidor web PHP (si es necesario)
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html  # Monta el directorio actual al contenedor PHP
      #- ./vendor:/var/www/html/vendor  # Monta la carpeta vendor fuera del contenedor
      #- ./composer.lock:/var/www/html/composer.lock  # Monta composer.lock fuera del contenedor
      #- /var/www/html/vendor # Esto asegura que la carpeta vendor estén aislados dentro del contenedor y en la maquina local
      #- ./vendor:/var/www/html/vendor  # Montar el volumen para la carpeta vendor
      #- ./composer.lock:/var/www/html/composer.lock  # Montar el volumen para composer.lock
    networks:
      - app_network
    depends_on:
      - db

  db:
    image: mysql:5.7
    container_name: mysql_db
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: MKdjWl$29#MD4&l5kw2?
      MYSQL_DATABASE: prueba_tecnica_docfav
      MYSQL_PASSWORD: MKdjWl$29#MD4&l5kw2?
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network

  composer:
    image: composer:2
    container_name: composer-container
    volumes:
      - .:/var/www/html
    networks:
      - app_network
    entrypoint: ["composer", "install"]  # Ejecuta "composer install" automáticamente al arrancar
    environment:
      - COMPOSER_ALLOW_SUPERUSER=1
    depends_on:
      - php
    working_dir: /var/www/html


volumes:
  mysql_data:
    driver: local

networks:
  app_network:
    driver: bridge
